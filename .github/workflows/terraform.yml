name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  release:
    types:
      - published

env:
  tf_actions_working_dir: "./terraform"

permissions:
  pull-requests: write
  id-token: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan
        continue-on-error: true

      - name: Comment PR with Terraform Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          FMT_OUTCOME: ${{ steps.fmt.outcome }}
          INIT_OUTCOME: ${{ steps.init.outcome }}
          VALIDATE_OUTCOME: ${{ steps.validate.outcome }}
          VALIDATE_OUTPUT: ${{ steps.validate.outputs.stdout }}
          PLAN_OUTCOME: ${{ steps.plan.outcome }}
          ACTOR: ${{ github.actor }}
          EVENT_NAME: ${{ github.event_name }}
          WORKING_DIR: ${{ env.tf_actions_working_dir }}
          WORKFLOW: ${{ github.workflow }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = #### Terraform Format and Style üñå\${ process.env.FMT_OUTCOME }\
            #### Terraform Initialization ‚öôÔ∏è\${ process.env.INIT_OUTCOME }\
            #### Terraform Validation ü§ñ\${ process.env.VALIDATE_OUTCOME }\
            <details><summary>Validation Output</summary>

            \\\\n
            ${ process.env.VALIDATE_OUTPUT }
            \\\

            </details>

            #### Terraform Plan üìñ\${ process.env.PLAN_OUTCOME }\

            <details><summary>Show Plan</summary>

            \\\\n
            ${process.env.PLAN}
            \\\

            </details>

            *Pusher: @${ process.env.ACTOR }, Action: \${ process.env.EVENT_NAME }\, Working Directory: \${ process.env.WORKING_DIR }\, Workflow: \${ process.env.WORKFLOW }\*;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply:
    name: Terraform Apply
    needs: terraform-plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan